#!/bin/bash
#
# remot3_script_lib is a collection of useful functions
# for use in remot3 scripts
#
#
# 
#----------------------------------------------------------
VERSION="1.1.0"
MODIFIED="July 27, 2016"
VERBOSE=1

TOOL_DIR="/usr/bin"
DEBUG_DIR="/tmp"
# turn on debug, set to 1 and will write to DEBUG_DIR/scriptname.log
DEBUG_ON=0
DEBUG=0

HOUR=$(expr 60 \* 60)
DAY=$(expr $HOUR \* 24)
WEEK=$(expr $DAY \* 7)
TASK_LIFE=$WEEK # default task life is 1 week, expressed in seconds
START=$(date +%s)

#
# API for short code
#
apiMethod="https://"
apiURI="/tiny/lookup/"

########################################
# Support Functions                    #
########################################

Has_Task_Expired()
{
	now=$(date +%s)
	delta=$((now-START))
	
	if [ $delta -gt $TASK_LIFE ]; then
		# exit the script since task has expired
		Log "Task started at $START (present time $now, delta of $delta) with life of $TASK_LIFE has expired.  Exiting..."		
		exit 1
	else
		Log "Task <good> started at $START (present time $now, delta of $delta) with life of $TASK_LIFE."
		return 0
	fi
}


#----------------------------------------------------------
# Internet_Available - check to see if API is available
Internet_Available()
{
    Log "Checking to see if Internet is available... $(date +%s)"
	ret=0
    nc -z api.weaved.com 80  >/dev/null 2>&1
    online=$?
	Log "api.weaved.com response at $(date +%s) -- $online"
    if [ $online -eq 0 ]; then
        if [ $VERBOSE -gt 0 ]; then
            logger "$0 Internet Available"
			Log "Internet is available"
        fi
        ret=1
    else
        if [ $VERBOSE -gt 0 ]; then
            logger "$0 Internet Not Available"
			Log "Internet NOT available"
        fi
    fi
    return $ret
}
# end of Internet_Available

#----------------------------------------------------------
# Wait_For_Internet - waits until API is available
Wait_For_Internet()
{
while [ 1 ]
do
    Has_Task_Expired
	
	# task has not expired
	if [ $? -eq 0 ]; then
	
		# check to see if internet is available
		Internet_Available
		
		if [ $? -eq 1 ]; then
			# internet is available, return
			sleep 2
			return 0
		fi 
		
		# wait for 15 seconds and recheck internet 
		Log "Wait_For_Internet - sleeping for 15 before checking internet again"
		sleep 15
		logger "$0 Looping while internet not available"
	fi
done
}
# end of Wait_For_Internet

#----------------------------------------------------------
#
# Print Usage
#
usage()
{
    echo "Usage: $0 <jobid> <api server> <shortcode>" >&2
    echo "Version $VERSION Build $MODIFIED" >&2
    return 0
}

#----------------------------------------------------------
#
# Log if DEBUG_ON is set to /tmp
#
Log()
{
    if [ $DEBUG_ON -gt 0 ]; then
        ts=$(date)
        echo "$ts $1" >> ${DEBUG_DIR}/$(basename $0).log
    fi
}

#----------------------------------------------------------
#
# Task Update
#
Task_Update()
{
	Log "Task_Update"
    Wait_For_Internet
    task_entry_time=$(date +%s)
    Log "     task_notify - begin at $task_entry_time"
	Wait_For_Internet
	ret=$(${TOOL_DIR}/task_notify.sh 0 $jobid $api_server "$1")
	task_now=$(date +%s)
	task_delta=$((task_now-task_entry_time))
	Log "--->task_notify - end - lasted $task_delta sec."
	Log " "
}

#----------------------------------------------------------
#
# Task Complete
#
Task_Complete()
{
	Log "Task_Complete"
    Wait_For_Internet
    task_entry_time=$(date +%s)
    Log "     task_notify - begin at $task_entry_time"
	Wait_For_Internet
	ret=$(${TOOL_DIR}/task_notify.sh 1 $jobid $api_server "$1")
	task_now=$(date +%s)
	task_delta=$((task_now-task_entry_time))
	Log "--->task_notify - end - lasted $task_delta sec."
	Log " "
}

#----------------------------------------------------------
#
# Task Failed
#
Task_Failed()
{
	Log "Task_Failed"
    Wait_For_Internet
    task_entry_time=$(date +%s)
    Log "     task_notify - begin at $task_entry_time"
	Wait_For_Internet
	ret=$(${TOOL_DIR}/task_notify.sh 2 $jobid $api_server "$1")
	task_now=$(date +%s)
	task_delta=$((task_now-task_entry_time))
	Log "--->task_notify - end - lasted $task_delta sec."
	Log " "
}

#----------------------------------------------------------
#
# Status column A
#
Status_A()
{
	Log "Status_A"
    Wait_For_Internet
    task_entry_time=$(date +%s)
    Log "     task_notify - begin at $task_entry_time"
	Wait_For_Internet
	ret=$(${TOOL_DIR}/task_notify.sh a $jobid $api_server "$1")
	task_now=$(date +%s)
	task_delta=$((task_now-task_entry_time))
	Log "--->task_notify - end - lasted $task_delta sec."
	Log " "
}

#----------------------------------------------------------
#
# Status column B
#
Status_B()
{
	Log "Status_B"
    Wait_For_Internet
    task_entry_time=$(date +%s)
    Log "     task_notify - begin at $task_entry_time"
	Wait_For_Internet
	ret=$(${TOOL_DIR}/task_notify.sh b $jobid $api_server "$1")
	task_now=$(date +%s)
	task_delta=$((task_now-task_entry_time))
	Log "--->task_notify - end - lasted $task_delta sec."
	Log " "
}

#----------------------------------------------------------
#
# Status column C
#
Status_C()
{
	Log "Status_C"
    Wait_For_Internet
    task_entry_time=$(date +%s)
    Log "     task_notify - begin at $task_entry_time"
	Wait_For_Internet
	ret=$(${TOOL_DIR}/task_notify.sh c $jobid $api_server "$1")
	task_now=$(date +%s)
	task_delta=$((task_now-task_entry_time))
	Log "--->task_notify - end - lasted $task_delta sec."
	Log " "
}

#----------------------------------------------------------
#
# Status column D
#
Status_D()
{
	Log "Status_D"
    Wait_For_Internet
    task_entry_time=$(date +%s)
    Log "     task_notify - begin at $task_entry_time"
	Wait_For_Internet
	ret=$(${TOOL_DIR}/task_notify.sh d $jobid $api_server "$1")
	task_now=$(date +%s)
	task_delta=$((task_now-task_entry_time))
	Log "--->task_notify - end - lasted $task_delta sec."
	Log " "
}

#----------------------------------------------------------
#
# Status column E
#
Status_E()
{
	Log "Status_E"
    Wait_For_Internet
    task_entry_time=$(date +%s)
    Log "     task_notify - begin at $task_entry_time"
	Wait_For_Internet
	ret=$(${TOOL_DIR}/task_notify.sh e $jobid $api_server "$1")
	task_now=$(date +%s)
	task_delta=$((task_now-task_entry_time))
	Log "--->task_notify - end - lasted $task_delta sec."
	Log " "
}

#----------------------------------------------------------
# JSON parse (very simplistic):  get value frome key $2 in buffer $1,  values or keys must not have the characters {}[", 
#   and the key must not have : in it
#
#  Example:
#   value=$(JSONval "$json_buffer" "$key") 
#                                                   
JSONval()                                              
{
#    echo "jsonval $1 $2"
    temp=`echo "$1" | sed -e 's/[{}\"]//g' | sed -e 's/,/\'$'\n''/g' | grep -w $2 | cut -d"[" -f2- | cut -d":" -f2-`
    #echo ${temp##*|}         
    echo ${temp}                                                
}                                                   

#----------------------------------------------------------
JSONvalx()
{
    temp=`echo $1 | sed -e 's/[{}"]//g' -e "s/,/\\$liblf/g" | grep -w $2 | cut -d":" -f2-`
    #echo ${temp##*|}
    echo ${temp}    
}

#----------------------------------------------------------
#
# translate short code
#
Translate()
{
    ret=0
    # make api call
    translate_url=${apiMethod}${api_server}${apiURI}${short_code}

    Log "Translate URL call using URL $translate_url"

    resp=$(curl -s -S -X GET -H "content-type:application/json" -H "apikey:WeavedDeveloperToolsWy98ayxR" "$translate_url")
    
    status=$(JSONval "$resp" "status")

    Log "return status $status"

    if [ "$status" == "true" ]; then
        #jsonvalx()
        item=$(JSONval "$resp" "item")
        #
        # Convert from base64
        decode=$(echo "$item" | base64 --decode)
       
        Log "item $item -> $decode"
   
        echo -n "$decode"
    else
        printf "Fail"
        ret=1
    fi

    return $ret
}

##############################################################################
Save_State()
{
# Parameters passed
# $1 - jobid
# $2 - api_server
# $3 - TASK_LIFE
# $4 - START
# $5 - Status_B message
# $6 - Task_Complete message
# $7 - DEBUG_ON
 
    if [ ! -d "/root/.remot3.it" ]; then
        mkdir "/root/.remot3.it"
    fi

# save command and parameters for pass of uncompleted command through reboots
# cron reboot task needs to be in place to scan and execute commands left in the file above
	REBOOTFILE=/root/.remot3.it/weaved-reboot.sh
	
	# clear old cronjob in case last one didn't get executed possibly due to task expired
    cronRemoveLine "@reboot bash -x $REBOOTFILE >> /tmp/rebootlog"

	echo "#!/bin/bash" > $REBOOTFILE
	echo "#" >> $REBOOTFILE
    echo "# Update status and task after reboot" >> $REBOOTFILE
	echo "#" >> $REBOOTFILE
	echo " " >> $REBOOTFILE
    echo "source /usr/bin/remot3_script_lib-1.1" >> $REBOOTFILE
    echo "source /usr/bin/weavedinstallerlib" >> $REBOOTFILE
	echo " " >> $REBOOTFILE
	echo "DEBUG_ON=$7" >> $REBOOTFILE
	echo " " >> $REBOOTFILE
	echo "jobid=$1" >> $REBOOTFILE
	echo "api_server=$2" >> $REBOOTFILE
	echo "TASK_LIFE=$3" >> $REBOOTFILE
	echo "START=$4" >> $REBOOTFILE
	echo " " >> $REBOOTFILE
    echo "Wait_For_Internet" >> $REBOOTFILE
    echo "sleep 5" >> $REBOOTFILE
    echo "Status_B \"Success\"" >> $REBOOTFILE
    echo "Status_C \"$5\"" >> $REBOOTFILE
    echo "Task_Complete \"$6\"" >> $REBOOTFILE
    echo "cronRemoveLine '@reboot bash -x $REBOOTFILE >> /tmp/rebootlog'" >> $REBOOTFILE
#    echo "rm $REBOOTFILE" >> $REBOOTFILE
    chmod +x $REBOOTFILE
    cronAddLine "@reboot bash -x $REBOOTFILE >> /tmp/rebootlog"
    sync
    sleep 2
#    /sbin/reboot
}

##############################################################################
# Read timeout for wget, default is 900 seconds.  set shorter for testing.
READTIMEOUT=120
READRETRIES=5

# constants for retry logic


Download_With_Retry()
{
    Log "$1"

    filename=$(echo "$1" | awk '{ print $3 }')
    Log "$filename"

    # remove any possible existing file of same name we are about to download
    if [ -e "$filename" ]; then
        Log "Removing pre-existing $filename"
        rm "$filename"
    fi

    Log "Download started at $START"

	# while task has not expired
    while Has_Task_Expired; do    	
		wget_o=$(wget -c --read-timeout="$READTIMEOUT" -t $READRETRIES --no-check-certificate $1 )
		retval=$?
			
		# download was successful
		if [ $retval -eq 0 ]; then
			return 0
		else
			# wget returned error, check for connectivity issue
			if [ $retval -eq 4 ]; then
				Log "$filename: wget returned $retval at $time, elapsed = $DELTA"
				Task_Update "Download interrupted, retry in 5 sec."
				sleep 5
			else
				# other wget error code, update task status
				Status_B "Download Error"
				Status_C "wget returned $retval"
				Task_Failed "Error - wget download returned $retval"
				exit 1 
			fi
		fi
     done
}
