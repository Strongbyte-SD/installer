#!/bin/bash

#  regdevice
#
#  Run 'sudo ./regdevice' to register a specific device
#
#  Weaved, Inc. Copyright 2015. All rights reserved.
#

##### Settings #####
VERSION=v1.3-04_Reg-test
AUTHOR="Gary Worsham"
MODIFIED="November 18, 2015"
DAEMON=weavedconnectd
USERNAME=""
PASSWD=""
WEAVED_PORT="Weavedssh22"
# ----------------------------------------
# folders and files
WEAVED_DIR=/etc/weaved/services
WEAVED_LIB_DIR=/usr/share/weavedconnectd
BIN_DIR=/usr/bin
TMP_DIR=/tmp
INIT_DIR=/etc/init.d
PID_DIR=/var/run
filename=`basename $0`

# ----------------------------------------
# startupScripts = 0, ask; 1, init.d; 2, systemd; 3, crontab
# only crontab currently supported.
startupScripts=3
STARTEMUP=weavedstart.sh

# ----------------------------------------
# web API URLs
version=v22
loginURL=https://api.weaved.com/$version/api/user/login
preregdeviceURL=https://api.weaved.com/$version/api/device/create
regdeviceURL=https://api.weaved.com/$version/api/device/register
connectURL=http://api.weaved.com/$version/api/device/connect

# ----------------------------------------
# adjusts behavior of grep
shopt -s nullglob
##### End Settings #####

##### Version #####
displayVersion()
{
    printf "Weaved Device Registration Version: %s \n" "$VERSION"
    # check for sudo user at this point
    if [[ $EUID -ne 0 ]]; then
        echo "Running regdevice requires root access." 1>&2
        echo "Please run sudo regdevice instead of regdevice." 1>&2
	exit 1
    fi
}
##### End Version #####

##### Compatibility checker #####
weavedCompatibility()
{
    printf "\nChecking your network for compatibility... \n\n"
    $BIN_DIR/"$DAEMON"."$PLATFORM" -n > $TMP_DIR/.testdaemon
    grep OK $TMP_DIR/.testdaemon > $TMP_DIR/.networkDump
    number=$(cat $TMP_DIR/.networkDump | wc -l)

    if [ "$number" -ge 3 ]; then
        printf "Your network is compatible with Weaved services.\n\n"
        sleep 2
    elif [ "$(cat $TMP_DIR/.networkDump | grep "Send to" | grep "OK" | wc -l)" -lt 1 ]; then
        printf "Unfortunately, it appears your network may not currently be compatible with Weaved services.\n"
        printf "Please visit https://forum.weaved.com for help.\n\n"
        exit
    fi
}
##### End Compatibility checker #####


getUID()
{
	uid=$(grep '^UID' $WEAVED_DIR/"$WEAVED_PORT".conf | awk '{ print $2 }' )
	if [ "$uid" == "" ]; then
		echo "Error!  $WEAVED_PORT.conf does not have a UID."
		echo "Please check that the daemon is running and "
		echo "you have a working internet connection."
		exit 1
	else
		echo "device UID is $uid"
	fi
}

platformDetection()
{
    machineType="$(uname -m)"
    osName="$(uname -s)"
    if [ -f "/etc/os-release" ]; then
        distributionName=$(cat /etc/os-release | grep ID= | grep -v VERSION | awk -F "=" {'print $2'})
    fi
    if [ "$machineType" = "armv6l" ]; then
        PLATFORM=pi
        SYSLOG=/var/log/syslog
    elif [ "$machineType" = "armv7l" ]; then
	if [ "$distributionName" == "ubuntu" ]; then
		PLATFORM=wand
	else 
        	PLATFORM=pi
	fi
        SYSLOG=/var/log/syslog
    else
        printf "Sorry, you are running this installer on an unsupported device. But if you go to \n"
        printf "http://forum.weaved.com we'll be happy to help you get your device up and running. \n\n"
        printf "Please supply the following information: \n\n"
        uname -a
        cat /proc/cpuinfo
        printf "Thanks! \n"
        exit
    fi

    #   printf "Detected platform type: %s \n" "$PLATFORM"
    #   printf "Using %s for your log file \n\n" "$SYSLOG"
}
##### End Platform detection #####

##### Check for Bash #####
bashCheck()
{
    if [ "$BASH_VERSION" = '' ]; then
	clear
	printf "You executed this script with dash vs bash! \n\n"
	printf "Please execute \"chmod +x "$filename"\" and then \n"
	printf "execute \"./"$filename"\".  \n\n"
	printf "Thank you! \n"
	exit
    else
	echo "Now launching the Weaved connectd daemon installer..." > /dev/null
    fi
}
##### End Bash Check #####

######### Ask Function #########
ask()
{
    while true; do
	if [ "${2:-}" = "Y" ]; then
	    prompt="Y/n"
	    default=Y
	elif [ "${2:-}" = "N" ]; then
	    prompt="y/N"
	    default=N
	else
	    prompt="y/n"
	    default=
	fi
	# Ask the question
	read -p "$1 [$prompt] " REPLY
	# Default?
	if [ -z "$REPLY" ]; then
	    REPLY=$default
	fi
	# Check if the reply is valid
	case "$REPLY" in
	    Y*|y*) return 0 ;;
	    N*|n*) return 1 ;;
	esac
    done
}
######### End Ask Function #########


######### Begin askRegisterLogin #########
getEmail() 
{
    printf "Enter your e-mail address to create a new Weaved account.\n"
    if [ "$USERNAME" != "" ]; then 
	username="$USERNAME"
    else        
	read username
    fi
}


######### Begin Portal Login #########
userLogin () #Portal login function
{
    clear
    if [ "$USERNAME" != "" ]; then 
	username="$USERNAME"
    else        
	printf "Please enter your Weaved Username (email address): \n"
	read username
    fi
    if [ "$PASSWD" != "" ]; then
	password="$PASSWD"
    else
	printf "\nPlease enter your password: \n"
	read  -s password
    fi
    signInAPI
}
######### End Portal Login #########

####### SignInAPI ###################
signInAPI()
{
    resp=$(curl -s -S -X GET -H "content-type:application/json" -H "apikey:WeavedDeveloperToolsWy98ayxR" "$loginURL/$username/$password" 2> $TMP_DIR/.curlerr)

#    echo $resp

    status=$(jsonval "$resp" "status")

    if [ "$status" == "true" ]; then
	token=$(jsonval "$resp" "token")
#	echo "token: $token"
    else
    	loginFailed=$(echo "$resp" | grep "The username or password are invalid" | sed 's/"//g')
    	login404=$(echo "$resp" | grep 404 | sed 's/"//g')
    fi

    # invalid cert can happen if system date is set to before current date
    invalidCert=$(cat $TMP_DIR/.curlerr  | grep "SSL certificate problem")
    date +"%s" > $TMP_DIR/.lastlogin
}
####### End SignInAPI ###################

######### Test Login #########
testLogin()
{
    while [ "$loginFailed" != "" ]; do
	clear
	printf "You have entered either an incorrect username or password. Please try again.\n"
	printf "Press the 'Enter' key to continue.\n"
        read
	userLogin
    done
    if [ "$invalidCert" != "" ]; then
        clear
        printf "The login security certificate is not valid.  This can be caused\n"
        printf "by your system date being incorrect.  Your system date is:\n\n $(date)\n\n"
        printf "Please correct the system date if needed and run the installer again.\n"
        printf "Run the command 'man date' for help resetting the date.\n\n"
        printf "If you are receiving this message and your system date is correct,\n"
        printf "please contact Weaved support at forum.weaved.com.\n"
        exit
    fi
}
######### End Test Login #########

######### Register Device #########
getSecret()
{
    secretCall="$(curl -s $regdeviceURL -X 'POST' -d "{\"deviceaddress\":\"$uid\", \"devicealias\":\"$alias\", \"skipsecret\":\"true\"}" -H “Content-Type:application/json” -H "apikey:WeavedDeveloperToolsWy98ayxR" -H "token:$token")"

#    echo $secretCall

    status=$(jsonval "$secretCall" "status")
#    echo "Status: $status"

#    read anyKey 
   
    test2="$(echo $secretCall | grep -E "missing api token|api token missing" | wc -l)"
    if [ "$status" == "true" ]; then
        secret=$(jsonval "$secretCall" "secret" | sed s/://g)
	echo $secret
	echo "# password - erase this line to unregister the device" >> "$WEAVED_DIR"/"$WEAVED_PORT".conf
	echo "password $secret" >> "$WEAVED_DIR"/"$WEAVED_PORT".conf

    elif [ $test2 = 1 ]; then
	printf "For some reason, you were logged out and must log back in. \n"
	userLogin
	getSecret
    else
	echo $secretCall
    fi
}

######### End Pre-register Device #########

######### Register Device #########
registerDevice()
{
    #    clear
    #    printf "Service startup script: $WEAVED_PORT.sh\n"
    alias=""
    while [ "$alias" = "" ]; do
	printf "\nEnter a name for this Service Attachment (e.g. SSH-Pi). \n"
	printf "This name will be shown in your Weaved Device List.\n\n"
        read alias
    done
    printf "Your Service Attachment will be called %s.\n\n" "$alias" > /dev/null
}
######### End Register Device #########

######### Start Service #########
startService()
{
    printf "\n"
    echo -n "Registering Service Attachment $alias ..."
    printf "\n"
    $BIN_DIR/$WEAVED_PORT.sh restart
}
######### End Start Service #########

# JSON parse (very simplistic):  get value frome key $2 in buffer $1,  values or keys must not have the characters {}[", 
#   and the key must not have : in it
#
#  Example:
#   value=$(jsonval "$json_buffer" "$key") 
#                                                   
jsonval()                                              
{
#    echo "jsonval $1 $2"
    temp=`echo "$1" | sed -e 's/[{}\"]//g' | sed -e 's/,/\'$'\n''/g' | grep -w $2 | cut -d"[" -f2- | cut -d":" -f2-`
    #echo ${temp##*|}         
    echo ${temp}                                                
}                                                   

jsonvalx()
{
    temp=`echo $1 | sed -e 's/[{}"]//g' -e "s/,/\\$liblf/g" | grep -w $2 | cut -d":" -f2-`
    #echo ${temp##*|}
    echo ${temp}    
}

#############################

configureConnection()
{
    getUID
    registerDevice
    getSecret
    startService
}

######### Main Program #########
main()
{
    clear
    displayVersion
    bashCheck
    platformDetection
    weavedCompatibility
    userLogin
    testLogin
    configureConnection
}
######### End Main Program #########
main
